package types // import "github.com/skeptycal/types"

const ESC = "\x1b" ...
const UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ...
const ReplacementChar rune = '\uFFFD'
var Greek = charMap{ ... }
var IsTerminal bool = isTerminal()
var NoColor = color.NoColor
func Addr(v reflect.Value) reflect.Value
func CPUOptions() string
func CPUOptionsAvailable() string
func Contains(needle Any, haystack []Any) bool
func Convert(v reflect.Value, typ reflect.Type) reflect.Value
func Count(needle Any, haystack []Any) int
func Elem(v reflect.Value) reflect.Value
func HasAVX2() bool
func HasAlternate(v Any) bool
func Indirect(v reflect.Value) reflect.Value
func IsComparable(a Any) bool
func IsDeepComparable(v Any) bool
func IsIterable(v Any) bool
func IsOrdered(v Any) bool
func KindOf(a Any) reflect.Kind
func NewColor(value ...color.Attribute) *color.Color
func NewStruct(v Any) *structs.Struct
func RandomGreek(length, minGreekPct, maxGreekPct int) string
func RandomGreekString(n int) string
func RandomString(n int) string
func ShowFrequency(s string) string
func TerminalExample()
func ToString(a Any) string
func TypeOf(a Any) reflect.Type
func ValueOf(i interface{}) reflect.Value
func WithLock(lk Locker, fn func())
func Frequency(s string) byteMap
func NewByteMap(s string) *byteMap
func NewKindInfo(a Any) kindInfo
type Any = interface{}
    func Interface(v reflect.Value) Any
type AnyValue interface{ ... }
    func NewAnyValue(a Any) AnyValue
type Closer interface{ ... }
type ColumnType = sql.ColumnType
type ColumnTyper interface{ ... }
type Connecter interface{ ... }
type Conner interface{ ... }
type Cosa struct{}
type Cruder interface{ ... }
type DB interface{}
type Enabler interface{ ... }
type Errer interface{ ... }
type Formatter interface{ ... }
type Fprinter interface{ ... }
type GetSetter interface{ ... }
type Kind = reflect.Kind
type KindInfo interface{ ... }
type Locker interface{ ... }
type Printer interface{ ... }
type Protector interface{ ... }
type Result interface{ ... }
type Row = sql.Row
type Rower interface{ ... }
type Rows = sql.Rows
type Rowser interface{ ... }
type Scanner interface{ ... }
type Slicer interface{ ... }
type Sorter interface{ ... }
type Sprinter interface{ ... }
type State interface{ ... }
type Stmter interface{ ... }
type StringWriter interface{ ... }
type Stringer interface{ ... }
type TxOptions = sql.TxOptions
type Txer interface{ ... }
type Type = reflect.Type
type Writer interface{ ... }
